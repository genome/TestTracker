#!/usr/bin/env perl

use strict;
use warnings;

use Carp 'croak';
use List::MoreUtils qw(uniq);
use Pod::Usage;
use TestTracker::Config;
use TestTracker;

my %options = TestTracker::parse_args(
    'explain' => 'explain|e',
    'all'     => 'all|a',
);

my @files = @ARGV;
my @nonfiles = grep { ! -f $_ } @files;
if (@nonfiles) {
    printf STDERR ("ERROR: Nonfiles passed in arguments:\n%s\n", join("\n", @nonfiles));
    exit 1;
}

if (!defined($options{git}) && !@files && !$options{all}) {
    pod2usage(2);
}

my @git_files;
if (@files) {
    push @git_files, TestTracker::rel2git(@files);
}

if (defined $options{git}) {
    push @git_files, TestTracker::changed_files_from_git($options{git});
}

if ($options{all}) {
    push @git_files, TestTracker::all_tracked_tests();
}

@git_files = uniq @git_files;
unless (@git_files) {
    printf STDERR ("No files provided.\n");
    exit;
}

my %config = TestTracker::Config::load();

my @tests = TestTracker::tests_for_git_files(@git_files);
push @tests, grep { /$config{test_regex}/ } @git_files;

@tests = uniq @tests;
unless (@tests) {
    print STDERR "No test coverage for:\n\t", join("\n\t", @git_files), "\n";
    exit;
}

my %modules_for_tests;
if ($options{explain}) {
    %modules_for_tests = TestTracker::modules_for_tests(\@tests, \@git_files);
}

my @test_durations = TestTracker::durations_for_tests(@tests);

my $format = "%5s  %s\n";
my $total_duration = 0;
for my $test_duration (@test_durations) {
    my ($test, $duration) = @{$test_duration};
    $total_duration += $duration;

    printf $format, $duration, $test;
    if ($options{explain}) {
        printf " "x12 . "Because of %s\n", join("\n" . " "x23, @{$modules_for_tests{$test}});
    }
}

printf "\nFound %s tests which would take a total of %s seconds (%s) to run.\n",
        scalar(@test_durations), $total_duration, TestTracker::format_duration($total_duration);

__END__

=head1 NAME

   test-tracker-list - List tests for given module paths or based on Git changes.

=head1 SYNOPSIS

   test-tracker-list [options] [module_path ...]

     Options:
       --git [<since>..<until>]             determine test(s) to run from Git changes
       --help                               brief help message
       --man                                full documentation
       -e, --explain                        explain what changes prompted test
       -a, --all                            list all tests

=cut
