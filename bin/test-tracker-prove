#!/usr/bin/env perl

use strict;
use warnings;

use Data::UUID;
use File::Path qw(make_path);
use File::Spec;
use TestTracker::Config;
use TestTracker;
use Pod::Usage;
use List::Util qw(max sum);
use List::MoreUtils qw(uniq);
use IPC::System::Simple qw(capture system);

my %o = TestTracker::parse_args(
    pass_through      => 1,
#   'option'          => 'arg_schema',
    'junit'           => 'junit|j',
    'track'           => 'track|t',
    'lsf-redirect'    => 'lsf-redirect',
    'lsf-tail'        => 'lsf-tail',
    'lsf-interactive' => 'lsf|l',
    'jobs'            => 'jobs|j=i',
    'iterate'         => 'iterate|i'
);

my $lsf = ($o{'lsf-interactive' || $o{'lsf-redirect'}} || $o{'lsf-tail'});

if ($o{'track'} && $lsf) {
    die '--track and --lsf are mutually exclusive options.';
}

if (!$o{jobs} && ($o{'track'} || $lsf)) {
    $o{jobs} = 10;
}

if ($o{'junit'}) {
    unshift @ARGV, '--timer', '--formatter', 'TAP::Formatter::JUnit';
}

if ($o{jobs}) {
    unshift @ARGV, '--jobs', $o{jobs};
}

if ($o{'lsf-redirect'} || $o{'lsf-tail'}) {
    setup_log_directory();
}

if ($o{'lsf-interactive'}) {
    unshift @ARGV, '--exec', 'test-tracker-exec-lsf-interactive';
}

if ($o{'lsf-tail'}) {
    unshift @ARGV, '--exec', 'test-tracker-exec-lsf-tail';
}

if ($o{'lsf-redirect'}) {
    unshift @ARGV, '--exec', 'test-tracker-exec-lsf-redirect';
}

if ($o{'track'}) {
    print STDERR "Pruning TestTracker database...\n";
    prune_deleted_tests();

    unshift @ARGV, '--exec', 'test-tracker-exec-tracker';
}

if ($o{iterate} && !$o{git}) {
    printf STDERR "`--iterate` may only be used with `--git`\n";
    exit 128;
}

if ($o{iterate}) {
    my $rev_arg = $o{git};
    iterate($rev_arg, @ARGV);
} else {
    if ($o{'git'}) {
        my @tests = TestTracker::tests_for_git_changes($o{'git'});
        my $msg_suffix = sprintf("to run based on Git changes (%s)", $o{'git'});
        unless (@tests) {
            printf STDERR "No tests %s.\n", $msg_suffix;
            exit 1;
        }
        my ($total_duration, $estimated_duration) = duration_stats_for_tests($o{jobs}, @tests);
        printf STDERR "Found %d tests %s which would take an estimated %d seconds (%s) to run.\n\n",
            scalar(@tests), $msg_suffix, $estimated_duration, TestTracker::format_duration($estimated_duration);
        push @ARGV, @tests;
    }

    exec prove(), @ARGV;
}

# Users want to see progress happening as fast as possible, which means running short tests first.
# But running all the short tests first will mean less than optimal use of time overall, which users
# won't appreciate.  This fn tries to order the tests to achieve a balance.
sub sort_tests_for_optimal_user_experience {
    my @durations_for_tests = @_;

    my @dec_sorted_tests = map { $_->[0] } @durations_for_tests;

    # simply alternate between fast and slow tests.
    my $count = 1;
    my @tests;
    while (@dec_sorted_tests) {
        if ($count % 2) {
            push @tests, pop @dec_sorted_tests;
        } else {
            push @tests, shift @dec_sorted_tests;
        }
        $count++;
    }

    return TestTracker::git2rel(@tests);
}

sub prove {
    my %config = TestTracker::Config::load();
    return $config{prove} || 'prove';
}

sub setup_log_directory {
    my %config = TestTracker::Config::load();
    my $workspace = $config{lsf_log_dir};
    my $username = getpwuid($>);
    my $uuid_generator = new Data::UUID;
    my $uuid = $uuid_generator->create_str();

    # Since we are doing a make_path
    die "cannot find workspace at $workspace" unless -d $workspace;

    my $log_directory = File::Spec->join($workspace, "test_logs", $username, $uuid);
    make_path($log_directory);
    die "couldn't create $log_directory" unless -d $log_directory;

    $ENV{TESTTRACKER_LOG_DIR} = $log_directory;
}

sub prune_deleted_tests {
    my @tests = TestTracker::all_tracked_tests();

    my %config = TestTracker::Config::load();
    my $dbh = TestTracker::db_connection();
    my $db_prefix = $config{db_prefix};

    for my $test (@tests) {
        my ($rel_test) = TestTracker::git2rel($test);
        next if -f $rel_test;

        print STDERR "\t$rel_test\n";
        my $test_id = TestTracker::get_test_id($dbh, $db_prefix, $test);
        TestTracker::delete_test_by_id($dbh, $db_prefix, $test_id);
    }

    $dbh->commit();
    $dbh->disconnect();
}

sub git_stash {
    my @prev_stash = capture('git stash list');
    system('git stash save --include-untracked --quiet');
    my @stash = capture('git stash list');
    return (@stash > @prev_stash);
}

sub print_revision_banner {
    my $rev = shift;
    print '*' x 72, "\n";
    print "Testing Revision: $rev\n";
    print 'v' x 72, "\n";
}

sub revision_has_coverage {
    my $rev = shift;
    my $rev_list = "$rev^..$rev";
    my @tests = capture('test-tracker', 'list', '--git', $rev_list);
    return scalar(@tests);
}

sub duration_stats_for_tests {
    my $jobs = shift;
    my @tests = @_;
    my @test_durations = map { $_->[1] } TestTracker::durations_for_tests(TestTracker::rel2git(@tests));
    my $total_duration = sum(@test_durations);
    my $estimated_duration = $total_duration;
    if ($jobs) {
        my $t = $estimated_duration / $jobs;
        $estimated_duration = max($t, max(@test_durations));
    }
    return ($total_duration, $estimated_duration);
}

sub iterate {
    my $rev_arg = shift;
    my @argv = @_;

    my $stashed = git_stash();
    if ($stashed) {
        print STDERR (
            "Stashing your working changes.  If you wish to test them as well you\n",
            "will need to:\n",
            "\tgit stash pop\n",
            "\ttest-tracker prove --git HEAD\n",
            "Press Enter/Return to continute...\n",
        );
        <STDIN>;
        print STDERR "Continuing...\n";
    }

    my @test_cmd = ('test-tracker', 'prove', '--git', 'HEAD^..HEAD', @argv);
    my $test_cmd = join(' ', @test_cmd);
    local $ENV{GIT_EDITOR} = 'true';
    system('git', 'rebase', '--interactive', '--exec', $test_cmd, $rev_arg);
}

sub symbolic_head {
    my $orig_rev = capture('git rev-parse --symbolic --abbrev-ref HEAD');
    chomp $orig_rev;
    return $orig_rev;
}

sub short_revisions {
    my $rev_arg = shift;

    # rev-list behavior is like log not like diff so add `..` if we don't think
    # user supplied the git argument.
    if ($rev_arg eq TestTracker::default_git_arg()
        && index($rev_arg, '..') == -1
    ) {
        $rev_arg .= '..';
    }

    my @revs = capture('git', 'rev-list', '--reverse', $rev_arg);
    chomp @revs;
    my @short_revs = map { capture('git', 'rev-parse', '--short', $_) } @revs;
    chomp @short_revs;
    return @short_revs;
}

__END__

=head1 NAME

    test-tracker-prove - Wrapper for `prove` that allows submission to LSF and detection of tests to run based on Git changes.

=head1 SYNOPSIS

    test-tracker-prove [options] [prove options] [test_path ...]

     Options:
       --lsf                                bsub test(s) to your LSF cluster
       --git [<since>..<until>]             determine test(s) to run from Git changes
       --junit                              enable JUnit output
       --help                               brief help message
       --man                                full documentation

    The above options are intercepted by `test-tracker-prove` but all other options/arguments are passed on to `prove`.

=cut
